generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  created_at DateTime @default(now())

  reviews Review[]

  @@map("managers")
}

model Provider {
  id         String   @unique
  password   String
  name       String
  cnpj       String   @unique
  segment_id String
  avatar     String?
  created_at DateTime @default(now())

  segment  Segment   @relation(fields: [segment_id], references: [id])
  contacts Contact[]

  parts Part[]

  @@map("providers")
}

model Segment {
  id         String     @id @default(uuid())
  name       String     @unique
  created_at DateTime   @default(now())
  providers  Provider[]

  @@map("segments")
}

model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  position     String
  phone_number String   @unique
  created_at   DateTime @default(now())

  department_id String
  department    Department @relation(fields: [department_id], references: [id])

  provider_id String
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Department {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  contacts   Contact[]

  @@map("departments")
}

enum PartStatus {
  NOT_SENT
  SENT_FOR_REVIEW
  UNDER_REVIEW
  APPROVED
  DISAPPROVED
  EXPIRED
}

model Part {
  id          String     @id @default(uuid())
  code        String     @unique
  description String
  status      PartStatus @default(NOT_SENT)
  comment     String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  subparts Subpart[]

  provider_id String
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  reviews Review[]

  @@map("parts")
}

model Subpart {
  id                          String   @id @default(uuid())
  name                        String
  gwi4_11a1                   String
  fispq_msds                  String
  rohs_report                 String
  rohs_report_date            DateTime
  rohs_report_expiration_date DateTime
  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  material_type_id String
  material_type    MaterialType? @relation(fields: [material_type_id], references: [id])

  part_id String
  part    Part   @relation(fields: [part_id], references: [id], onDelete: Cascade)

  @@map("subparts")
}

enum MaterialTypeName {
  METAL
  PLASTIC
  PAPER
  TAPE
}

model MaterialType {
  id         String           @id @default(uuid())
  name       MaterialTypeName @unique
  created_at DateTime         @default(now())
  subparts   Subpart[]

  @@map("material_types")
}

enum ReviewResolve {
  NOT_RESOLVED
  APPROVED
  DISAPPROVED
}

model Review {
  id         String        @id @default(uuid())
  resolve    ReviewResolve @default(NOT_RESOLVED)
  comment    String?
  created_at DateTime      @default(now())

  manager_id String
  manager    Manager @relation(fields: [manager_id], references: [id], onDelete: SetNull)

  part_id String
  part    Part   @relation(fields: [part_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())

  recipient_id String

  @@map("notifications")
}
